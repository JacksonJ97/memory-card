{"version":3,"sources":["components/Scoreboard/index.js","components/Grid/Card/index.js","components/Grid/index.js","theme/GlobalStyle.js","helpers/capitalizeFirstLetter.js","helpers/formatData.js","hooks/useFetch.js","helpers/shuffleData.js","App.js","index.js"],"names":["Wrapper","styled","div","Scoreboard","props","className","currentScore","bestScore","Card","onClick","handleCardClick","id","src","img","alt","name","Grid","data","map","element","index","GlobalStyle","createGlobalStyle","capitalizeFirstLetter","string","charAt","toUpperCase","slice","formatData","useFetch","amount","useState","fetchedData","setFetchedData","useEffect","controller","AbortController","getPokemons","a","fetch","signal","response","json","results","formattedData","abort","console","log","shuffleData","setShuffledData","dataCopy","i","length","randomIndex","Math","floor","random","temp","App","shuffledData","setCurrentScore","setBestScore","clickedIDs","setClickedIDs","e","setData","currentTarget","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aff8ccf9.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n// Styles\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin: 2em auto;\r\n  color: #ffffff;\r\n  font-size: 1.25rem;\r\n\r\n  .current-score,\r\n  .best-score {\r\n    padding: 1em;\r\n    border-radius: 6px;\r\n    width: 200px;\r\n    margin: 24px;\r\n    text-align: center;\r\n  }\r\n\r\n  .current-score {\r\n    background-color: #0075be;\r\n  }\r\n\r\n  .best-score {\r\n    background-color: #ffcc00;\r\n    color: #000000;\r\n  }\r\n\r\n  @media (max-width: 490px) {\r\n    flex-direction: column;\r\n\r\n    .current-score,\r\n    .best-score {\r\n      margin: 12px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Scoreboard = (props) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"current-score\">Current Score: {props.currentScore}</p>\r\n      <p className=\"best-score\">Best Score: {props.bestScore}</p>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Scoreboard;\r\n","import styled from \"styled-components\";\r\n\r\n// Styles\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  width: 200px;\r\n  height: 200px;\r\n  color: #000000;\r\n  border-radius: 6px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.07);\r\n  background-color: #ffcc00;\r\n  transition: transform 200ms ease-in-out;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  img {\r\n    display: block;\r\n    margin: 0 auto;\r\n    width: 96px;\r\n    height: 96px;\r\n  }\r\n\r\n  p {\r\n    text-align: center;\r\n    margin: 0.25em 0;\r\n    font-size: 1.25rem;\r\n  }\r\n`;\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <Wrapper onClick={props.handleCardClick} id={props.id}>\r\n      <img src={props.img} alt={props.name} />\r\n      <p>{props.name}</p>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from \"styled-components\";\r\n\r\n// Components\r\nimport Card from \"./Card\";\r\n\r\n// Styles\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 200px);\r\n  justify-content: center;\r\n  gap: 24px;\r\n\r\n  @media (max-width: 700px) {\r\n    grid-template-columns: repeat(auto-fit, 200px);\r\n  }\r\n`;\r\n\r\nconst Grid = (props) => {\r\n  return (\r\n    <Wrapper>\r\n      {props.data.map((element, index) => (\r\n        <Card name={element.name} img={element.img} handleCardClick={props.handleCardClick} id={element.id} key={index} />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box;\r\n      font-family: \"Nunito\", sans-serif;\r\n    }\r\n\r\n    body {\r\n      background-color: #0A285F;\r\n    }\r\n\r\n    .error {\r\n      color: #ffffff;\r\n      font-size: 2rem;\r\n      text-align: center;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","const capitalizeFirstLetter = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n};\r\n\r\nexport default capitalizeFirstLetter;\r\n","import capitalizeFirstLetter from \"./capitalizeFirstLetter\";\r\n\r\nconst formatData = (data) => {\r\n  const formattedData = data.map((element, index) => ({\r\n    name: capitalizeFirstLetter(element.name),\r\n    img: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index + 1}.png`,\r\n    id: index + 1,\r\n  }));\r\n\r\n  return formattedData;\r\n};\r\n\r\nexport default formatData;\r\n","import { useState, useEffect } from \"react\";\r\nimport formatData from \"../helpers/formatData\";\r\n\r\nconst useFetch = (amount) => {\r\n  const [fetchedData, setFetchedData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let controller = new AbortController();\r\n\r\n    const getPokemons = async () => {\r\n      try {\r\n        const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${amount}`, { signal: controller.signal });\r\n        const results = await response.json();\r\n        const data = results.results;\r\n        const formattedData = formatData(data);\r\n        setFetchedData(formattedData);\r\n      } catch (error) {\r\n        if (controller.signal.abort) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    getPokemons();\r\n\r\n    return () => controller.abort();\r\n  }, [amount]);\r\n\r\n  return [fetchedData];\r\n};\r\n\r\nexport default useFetch;\r\n","const shuffleData = (data, setShuffledData) => {\r\n  if (data === null) {\r\n    return;\r\n  }\r\n\r\n  const dataCopy = [...data];\r\n\r\n  for (let i = dataCopy.length - 1; i > 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = dataCopy[i];\r\n    dataCopy[i] = dataCopy[randomIndex];\r\n    dataCopy[randomIndex] = temp;\r\n  }\r\n\r\n  setShuffledData(dataCopy);\r\n};\r\n\r\nexport default shuffleData;\r\n","import { useState, useEffect } from \"react\";\n\n// Components\nimport Scoreboard from \"./components/Scoreboard\";\nimport Grid from \"./components/Grid\";\n\n// Styles\nimport GlobalStyle from \"./theme/GlobalStyle\";\n\n// Hooks\nimport useFetch from \"./hooks/useFetch\";\n\n// Helpers\nimport shuffleData from \"./helpers/shuffleData\";\n\nconst App = () => {\n  const [fetchedData] = useFetch(9);\n  const [shuffledData, setShuffledData] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [clickedIDs, setClickedIDs] = useState([]);\n\n  useEffect(() => {\n    shuffleData(fetchedData, setShuffledData);\n  }, [fetchedData]);\n\n  const handleCardClick = (e, data, setData) => {\n    shuffleData(data, setData);\n    setCurrentScore((currentScore) => currentScore + 1);\n    setClickedIDs([...clickedIDs, e.currentTarget.id]);\n\n    if (clickedIDs.includes(e.currentTarget.id)) {\n      if (currentScore > bestScore) {\n        setBestScore(currentScore);\n      }\n\n      setCurrentScore(0);\n      setClickedIDs([]);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Scoreboard currentScore={currentScore} bestScore={bestScore} />\n      {fetchedData ? (\n        <Grid data={shuffledData} handleCardClick={(e) => handleCardClick(e, shuffledData, setShuffledData)} />\n      ) : (\n        <div className=\"error\">Couldn't fetch Pokemons</div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}